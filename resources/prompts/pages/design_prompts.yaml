design_overview:
  prompt: >
    You are a skilled software architect tasked with creating a design overview for a new feature. Your goal is to produce a comprehensive yet concise design overview that addresses all key aspects of the feature's architecture.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create a design overview that includes the following components:

    1. A brief introduction to the design phase
    2. Key goals and objectives of the design
    3. How the design aligns with business goals and key user stories
    4. A high-level summary of the main design components
    5. Any critical constraints or considerations

    ### Guidelines:

    1. Begin with a concise introduction that sets the context for the design phase.
    2. Clearly state the key goals and objectives, ensuring they align with the information provided in the context.
    3. Explicitly connect the design to business goals and user stories mentioned in the context.
    4. Provide a high-level overview of the main design components without delving into excessive technical details.
    5. Identify and explain any critical constraints or considerations that may impact the design or implementation.

    ### Format your response as follows:

    **Design Overview**

    **Introduction**  
    [Your introduction to the design phase]

    **Goals and Objectives**  
    [List of key goals and objectives]

    **Alignment with Business Goals**  
    [Explanation of how the design aligns with business goals and key user stories]

    **Main Components**  
    [High-level summary of the main design components]

    **Constraints and Considerations**  
    [List and explanation of critical constraints or considerations]

    Ensure that your design overview is clear, concise, and directly addresses the feature described in the provided context. Avoid including unnecessary details or speculation beyond what is provided in the input variables.
    return response in markdown format, do not use xml tags in the response

system_architecture:
  prompt: >
    You are a skilled software architect tasked with designing a system architecture for a new feature. Your goal is to create a comprehensive system architecture document that outlines all necessary components, interactions, and considerations for implementing the feature successfully.

    The feature you will be designing the system architecture for is:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Please create a detailed system architecture document for this feature. Include the following sections in your document:

    1. Overview: Provide a high-level summary of the feature and its main components.

    2. System Components: List and describe all major components of the system, including services, databases, APIs, and user interfaces.

    3. Data Flow: Explain how data moves through the system, including input sources, processing steps, and output destinations.

    4. Technologies and Frameworks: Specify the technologies, programming languages, frameworks, and tools recommended for implementing the feature.

    5. Security Considerations: Outline security measures and best practices to protect the system and its data.

    6. Scalability and Performance: Describe how the system will handle increased load and maintain performance as it scales.

    7. Integration Points: Identify any external systems or services that the feature needs to integrate with and how these integrations will be handled.

    8. Deployment Strategy: Explain the recommended approach for deploying the feature, including any containerization or cloud services to be used.

    9. Monitoring and Logging: Describe how the system will be monitored and what logging mechanisms should be implemented.

    10. Disaster Recovery and Backup: Outline strategies for backing up data and recovering from potential system failures.

    For each section, provide detailed explanations and, where applicable, include diagrams or charts to illustrate your points. You may use ASCII art or text-based representations for any diagrams.

    Before writing your final document, take some time to think through the architecture in a <scratchpad> section. Consider the feature's requirements, potential challenges, and best practices in software architecture.

    After completing your thought process, present your system architecture document within <architecture_document> tags. Ensure that each section is clearly labeled and thoroughly explained.

    Remember to tailor your architecture specifically to the given feature, making appropriate assumptions where necessary. If you need any clarification about the feature, state your assumptions clearly in the overview section.

    Your goal is to provide a comprehensive and professional system architecture document that could be used by a development team to implement the feature effectively and efficiently.
    return response in markdown format, do not use xml tags in the response

database_design:
  prompt: >
    You are a database designer tasked with creating a database design for a new feature. Your goal is to produce a comprehensive database design that meets the requirements of the feature.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create a database design that includes:

    - Entity-Relationship Diagram (ERD):
      - Provide a textual description of the ERD, outlining the main entities and their relationships. Ensure the explanation is clear, concise, and provides a good understanding of the database structure.
    - Entities and Attributes:
      - List the main entities in your ERD along with their attributes.
      - For each attribute, specify the data type and indicate any special properties, such as primary keys, foreign keys, or unique constraints.
    - Key Relationships Between Entities:
      - Describe the relationships between the entities, including the cardinality (e.g., one-to-one, one-to-many, many-to-many).
      - Explain any associative entities used to resolve many-to-many relationships and provide a rationale for their use.
    - Indexes and Constraints:
      - Identify and list necessary indexes that should be created to improve query performance.
      - Specify any constraints, such as unique constraints, check constraints, or foreign key constraints, that are crucial for maintaining data integrity.
    - Data Integrity and Performance Considerations:
      - Discuss additional measures or design decisions made to ensure data integrity and optimize performance.
      - Consider normalization, denormalization, partitioning strategies, or other relevant database design principles.
    - Additional Sections for Enhanced Documentation:
      - Data Model Versioning:
        - Document the version of the database model, including any changes made from previous versions. This is crucial for maintaining consistency and traceability as the design evolves.
      - Assumptions and Dependencies:
        - List any assumptions made during the design process, such as expected data volumes, user load, or external dependencies like third-party integrations or existing systems.
      - Security Considerations:
        - Outline any security measures included in the design, such as data encryption, access control mechanisms, and strategies to protect sensitive information.
      - Backup and Recovery Strategy:
        - Describe the backup and recovery plan for the database. This should include details on backup frequency, storage solutions, and recovery procedures in case of data loss.
      - Scalability and Future Growth:
        - Discuss how the database design accommodates scalability and future growth. Consider aspects such as horizontal scaling, sharding, and potential changes in data volume or structure.

    Documentation Format:
    - ERD Description:
      - [Textual description of the Entity-Relationship Diagram]
    - Entities and Attributes:
      - [List of main entities and their attributes, including data types and properties]
    - Key Relationships:
      - [Description of key relationships between entities]
    - Indexes and Constraints:
      - [List of necessary indexes and constraints]
    - Data Integrity and Performance:
      - [Considerations for data integrity and performance]
    - Data Model Versioning:
      - [Version history and changes from previous models]
    - Assumptions and Dependencies:
      - [List of assumptions and dependencies relevant to the design]
    - Security Considerations:
      - [Description of security measures included in the design]
    - Backup and Recovery Strategy:
      - [Outline of backup and recovery plans]
    - Scalability and Future Growth:
      - [Discussion on scalability considerations]

    Ensure that your design is clear, comprehensive, and tailored to the specific feature provided. Use your expertise as a database designer to make appropriate design decisions and explain your reasoning where necessary. Provide the response in markdown format.
    return response in markdown format, do not use xml tags in the response

user_interface_design:
  prompt: >
    You are a UI/UX designer tasked with creating a user interface design for a new feature. Your goal is to produce a user-friendly and visually appealing interface.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create a user interface design that includes:

    - Research and Analysis:
      - Analyze the feature requirements and objectives.
      - Identify the target user group and their needs.
      - Research similar features in existing applications for inspiration.
    - User Flow and Information Architecture:
      - Create a user flow diagram showing how users will interact with the feature.
      - Develop an information architecture that organizes content and functionality logically.
    - Wireframing:
      - Create low-fidelity wireframes for key screens or components of the feature.
      - Focus on layout, hierarchy, and functionality without detailed visual design.
    - Visual Design:
      - Develop a visual style guide including color scheme, typography, and iconography.
      - Apply the visual design to the wireframes, creating high-fidelity mockups.
    - Prototyping:
      - Create an interactive prototype demonstrating the feature's functionality and user flow.

    Present your design process and final output in the following format:

    - **Research and Analysis:** 
      - [Summary of your research findings and analysis]
    - **User Flow:** 
      - [Description of the user flow or a textual representation of the flow diagram]
    - **Information Architecture:** 
      - [Explanation of the information architecture for the feature]
    - **Wireframes:** 
      - [Description of the key wireframes for the feature, including layout and functionality]
    - **Visual Design:** 
      - [Description of the visual design elements, including color scheme, typography, and iconography]
    - **Prototype:** 
      - [Explanation of how the interactive prototype would function and demonstrate the feature's key interactions]
    - **Design Considerations:** 
      - [Discussion of any important design considerations, trade-offs, or decisions made during the process]

    Remember to consider accessibility and responsiveness throughout the design process, ensuring that the user interface is usable across different devices and by users with various abilities.

    Provide detailed explanations for each step of the design process, justifying your decisions and how they contribute to an effective user interface for the given feature. Provide the response in markdown format.
    return response in markdown format, do not use xml tags in the response

api_design:
  prompt: >
    You are an API designer tasked with creating an API design for a new feature. Your goal is to produce a comprehensive API design that meets the requirements of the feature.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create an API design that includes:

    - API Overview
      - Provide a brief overview of the API and its main components
    - Authentication
      - Describe the authentication method(s) to be used, e.g., OAuth 2.0, JWT, API keys
    - Endpoints
      - For each endpoint, include:
        - URL
        - HTTP Method
        - Description
        - Request Parameters (if any)
        - Request Body (if applicable)
        - Response Structure
        - Example Request (optional)
        - Example Response (optional)
    - Error Handling
      - Describe the general error response structure and common error codes
    - Versioning Strategy
      - Explain how versioning will be handled in the API
    - Rate Limiting
      - Describe any rate limiting policies
    - Security Considerations
      - Outline the security measures and practices for the API
    - Monitoring and Analytics
      - Describe how the API will be monitored and what metrics will be tracked
    - Compliance and Regulatory Requirements
      - Mention any compliance or regulatory standards the API must adhere to
    - Fallback and Redundancy
      - Discuss strategies for ensuring high availability and reliability
    - Additional Considerations
      - Include any other important notes or considerations for the API design

    Ensure that your API design is comprehensive, well-structured, and follows modern API design principles. Consider the specific needs of the feature and how the API can best support its functionality and potential future expansions. Provide the response in markdown format.
    return response in markdown format, do not use xml tags in the response

sequence_diagrams:
  prompt: >
    You are a systems analyst tasked with creating sequence diagrams for a new feature. Your goal is to produce clear and comprehensive sequence diagrams that illustrate the interactions between components.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create sequence diagrams that include:

    - System Context:
      - Provide important information about the system and its architecture, including relevant technical details, constraints, and any assumptions that impact the sequence diagrams.
    - Feature Overview:
      - Briefly introduce the feature and its main purpose.
      - List the key processes you have identified for the feature.
    - Sequence Diagrams:
      - For each key process, present the sequence diagram using the following format:
        - Process Name: [Name of the key process]
        - Sequence Diagram:
          - [Plain text representation of the sequence diagram]
        - Explanation: [Brief explanation of the process and interactions]
    - Assumptions and Constraints:
      - List of assumptions and constraints relevant to the diagrams
    - Future Considerations:
      - Scalability: [Discussion on scalability]
      - Potential Enhancements: [Suggestions for future improvements]
    - Validation and Review:
      - Peer Review: [Notes on peer review recommendations]
      - Testing Scenarios: [Proposed testing scenarios]

    Ensure that your sequence diagrams are clear, comprehensive, and accurately reflect the processes within the feature. Document your findings and diagrams in markdown format for easy readability and integration into project documentation.
    return response in markdown format, do not use xml tags in the response

security_design:
  prompt: >
    You are a security architect tasked with designing security measures for a new feature. Your goal is to produce a comprehensive security design that addresses potential vulnerabilities.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create a security design that includes:

    - Feature Overview:
      - Provide a brief overview of the feature and its key security considerations.
    - Risk Assessment:
      - List the identified potential security risks and vulnerabilities.
    - Security Measures:
      - Detail the proposed security measures, addressing each of the areas mentioned in the steps above.
    - Integration Considerations:
      - Explain how the security measures will integrate with existing systems and any necessary policy updates.
    - Maintenance Plan:
      - Outline the plan for ongoing security maintenance and auditing.
    - Compliance:
      - Address how the security design meets relevant compliance and regulatory requirements.
    - Threat Modeling:
      - Provide the results of the threat modeling exercise, including identified threats and mitigation strategies.
    - Incident Response Plan:
      - Detail the incident response plan, including detection, response, and recovery procedures.
    - User Training and Awareness:
      - Propose user training and awareness strategies to maintain a high level of security consciousness.
    - Testing and Validation:
      - Describe the planned security testing and validation processes to ensure the effectiveness of the security measures.
    - Additional Recommendations:
      - Provide any additional recommendations or considerations specific to this feature.

    Ensure your security design is comprehensive, addressing all potential vulnerabilities while maintaining the usability of the feature. Be specific in your recommendations, providing concrete examples and justifications for each security measure proposed. Provide the response in markdown format.
    return response in markdown format, do not use xml tags in the response

performance_considerations:
  prompt: >
    You are a performance engineer tasked with designing performance considerations for a new feature. Your goal is to produce a comprehensive performance design that addresses potential bottlenecks.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create performance considerations that include:

    - Performance Risks:
      - List the identified potential performance risks and bottlenecks.
    - Optimization Strategies:
      - Detail the proposed performance optimization strategies, addressing each of the areas mentioned in the context.
    - Integration Considerations:
      - Explain how the performance strategies will integrate with existing systems and any necessary policy updates.
    - Maintenance Plan:
      - Outline the plan for ongoing performance maintenance and auditing.
    - Compliance:
      - Address how the performance considerations meet relevant compliance and regulatory requirements.
    - Additional Recommendations:
      - Provide any additional recommendations or considerations specific to this feature.

    Ensure that your performance considerations are comprehensive, well-structured, and follow modern performance best practices. Consider the specific needs of the feature and how the performance strategies can best optimize its functionality and data processing.
    return response in markdown format, do not use xml tags in the response

testing_strategy:
  prompt: >
    You are a QA engineer tasked with creating a testing strategy for a new feature. Your goal is to produce a comprehensive testing strategy that covers all critical aspects of the feature.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create a testing strategy that includes:

    - Overview of the Testing Approach
      - Provide a high-level overview of the testing strategy, including the types of testing (e.g., unit, integration, end-to-end, performance) that will be employed.
    - Test Environment Setup
      - Describe the environment in which the tests will be executed, including any specific tools, frameworks, or infrastructure required.
    - Test Automation Plan
      - Detail the automation strategy, including which tests will be automated, the tools to be used, and how the automation will be integrated into the CI/CD pipeline.
    - Test Data Management
      - Outline how test data will be managed, including data creation, storage, and usage across different test cases.
    - Risk-Based Testing
      - Identify any high-risk areas of the feature and describe how testing will prioritize these areas to mitigate potential issues.
    - Coverage and Metrics
      - Define the test coverage goals and the metrics that will be tracked to measure the effectiveness of the testing strategy.
    - Roles and Responsibilities
      - Specify the roles and responsibilities of the QA team members involved in testing the feature.
    - Timeline and Milestones
      - Provide a timeline for the testing phases, including key milestones for test planning, execution, and reporting.

    Guidelines:

    - Ensure the testing strategy is thorough and covers all critical aspects of the feature.
    - Focus on efficiency by leveraging automation where possible.
    - Align the testing goals with the overall project objectives and timelines.
    - Address potential risks early by incorporating risk-based testing into the plan.
    return response in markdown format, do not use xml tags in the response

design_review:
  prompt: >
    You are a Software Development Process Manager responsible for creating and overseeing the design review and approval process for a new feature. Your goal is to produce a comprehensive design review process.

    You will be provided with the following information:

    - **Feature Name**: {feature_name}
    - **Context**: {context}

    Using this information, create a design review process that includes:

    - Stakeholder Feedback Mechanism
      - Establish a clear and efficient method for collecting, managing, and incorporating feedback from all relevant stakeholders, including product owners, developers, and end-users.
    - Design Validation Checklist
      - Develop a detailed checklist to validate the design against the project requirements, technical standards, and business goals. Ensure the checklist is thorough and covers all critical aspects of the design.
    - Approval Workflow and Sign-Off Process
      - Define a step-by-step approval workflow that outlines the key stages of review, the roles involved in each stage, and the criteria for sign-off. Include a timeline for each stage to ensure timely progression through the process.
    - Risk Assessment Methodology
      - Implement a risk assessment approach that identifies potential risks associated with the design and outlines strategies for mitigating these risks. Ensure this methodology is integrated into the review process.
    - Change Management Process for Design Updates
      - Create a process for managing changes to the design, including how updates are proposed, reviewed, approved, and documented. Ensure that this process minimizes disruption and maintains the integrity of the original design.
    - Documentation of Design Decisions and Their Rationale
      - Ensure that all design decisions are well-documented, including the rationale behind each decision. This documentation should be easily accessible for future reference and audit purposes.
    - Plan for Addressing and Incorporating Feedback
      - Develop a structured plan for how feedback will be addressed, prioritized, and incorporated into the design. Include timelines and responsible parties to ensure that feedback is handled effectively and efficiently.

    Guidelines:

    - The process should be robust yet flexible, allowing for thorough review while accommodating necessary changes and updates.
    - Ensure that all stakeholders are clearly informed of their roles and responsibilities throughout the review and approval process.
    - Focus on maintaining alignment with the overall project goals and timelines while ensuring the design meets all quality standards.
    - Ensure that the process includes mechanisms for continuous improvement based on lessons learned from previous design reviews.
    return response in markdown format, do not use xml tags in the response
